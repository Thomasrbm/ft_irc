




setsockopt() : 
    (int sockfd, int level, int optname, const void *optval, socklen_t optlen)

    - le fd du socket

    - le lvl du protocol = socket = , application = irc, interface, transport = tcp, reseau = ip, 

        SOL_SOCKET = niveau socket. IPPROTO_IP = ip v4,  IPPROTO_TCP = tcp etc.

    - les options pour le socket = 
        SO_REUSEADDR = reutiliser l adresse et le port 
        SO_RCVBUF = taille de reception du buffer du socket avant alerte
        SO_SNDBUF - tampon d envoi
        SO_LINGER = option de fermeture du socket = si on attend tout les packet avant fermeture etc
        SO_BROADCAST = envoi en broadcast
        SO_ERROR = recup erreur 

    - optlen = la taille de l option ci dessus pour que la ft sache combien lire.



    irssi -c localhost -n thomas -w "" -p 5959











/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rbardet- <rbardet-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/19 12:54:32 by rbardet-          #+#    #+#             */
/*   Updated: 2025/08/19 18:18:26 by rbardet-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include <cstdlib>
#include "../includes/Server.hpp"
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h> //-> for sockaddr_in
#include <netdb.h>// -> gethostbyname
#include <arpa/inet.h> // inet 

#define PORT 1
#define PASSWORD 2

int main(int ac, char **av) 
{
	struct sockaddr_in serv_address;
	hostent* localHost; // struct qui stock le localhost

	if (ac != 3) {
		std::cout << "usage: ./ircserv <port> <password>" << std::endl;
		return (1);
	}

	try 
	{
		Server serv(atoi(av[PORT]), av[PASSWORD]);
	}
	catch(const std::exception& e) 
	{
		std::cerr << e.what() << '\n';
	}

	int listen_sockfd = socket(AF_INET, SOCK_STREAM, 0); // domaine (type adress supportes v4 v6), type de socket, protocol en fonction des 2 premiers 
	pollfd *pol = new pollfd;
	nfds_t fd = listen_sockfd;
	pol->fd = listen_sockfd;
	int j = poll(pol, fd, 0);
	
	localHost = gethostbyname(""); // renvoit null

	serv_address.sin_family = AF_INET;
	serv_address.sin_addr.s_addr = inet_addr(INADDR_ANY); // convertit internet host adress en network adress (change bit order)  (endianness)  ici l adresse est 0.0.0.0 car accepte toute interface
	serv_address.sin_port = htons(5959); // host to network short . reseau = tjrs en big endian

	std::cout << "i = " << listen_sockfd << std::endl;
	std::cout << "j = " << j << std::endl;

	bind(listen_sockfd, (struct sockaddr *) &serv_address, sizeof(serv_address)); // 1er = id du fd socket, addre du socket, taille de la structure

	return (0);
}



// connect() : Établit une connexion à une adresse et un port distant via un socket, pour des sockets de type TCP.

// accept() : Accepte une connexion entrante sur un socket en mode écoute, et retourne un nouveau socket pour cette connexion.